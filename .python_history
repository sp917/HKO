quit
quit()
filename = './wrfout_d01_2018-06-08_00:00:00.nc'
f = Dataset(filename, 'r', format = 'NETCDF4_CLASSIC')
from netCDF4 import Dataset
f = Dataset(filename, 'r', format = 'NETCDF4_CLASSIC')
U = f.variables['U']
V = f.variables['V']
print(U.shape, V.shape)
XU = f.variables['XLONG_U']
YU = f.variables['XLAT_U']
XV = f.variables['XLONG_V']
YV = f.variables['XLAT_V']
print(XU.shape,YU.shape,XV.shape,YV.shape)
print(f.variables)
q()
quit()
from netCDF4 import Dataset
f = Dataset(filename, 'r', format = 'NETCDF4_CLASSIC')
filename = './wrfout_d01_2018-06-08_00:00:00.nc'
f = Dataset(filename, 'r', format = 'NETCDF4_CLASSIC')
X = f.variables['U']
print(X)
print(X.units)
print(X.description)
print(f.variables['XLONG'])
print(f.variables['XLAT'])
print(f.variables['XLAT_U'])
print(f.variables['XLAT_V'])
print(f.variables)
q()
quit()
from netCDF4 import Dataset
quit()
from netCDF4 import Dataset
ls
filename = 'wrfout_xhka_2019-07-09_08:00:00.t00.nc'
f = Dataset(filename, 'r', format='NETCDF4_CLASSIC')
print(f.variables['MAPFAC_U']
)
vardata = f.variables['MAPFAC_U']
import numpy as np
X = np.array(vardata)
print(X.shape)
xvals = f.variables['XLONG_U']
yvals = f.variables['XLAT_U']
print(xvals.shape)
print(yvals.shape)
R = 6371
pi = np.pi
print(pi)
yvalskm = yvals*R*pi/180
yvals = np.array(yvals)
xvals = np.array(xvals)
yvalskm = yvals*R*pi/180
xvalskm = pi*R*xvals*cos(yvals*pi/180)/180
xvalskm = pi*R*xvals*np.cos(yvals*pi/180)/180
print(xvalskm)
print(xvals)
print(xvals*MAPFAC_U)
print(xvals*X)
print(X)
print(xvals*X - xvals)
print(xvals/X - xvals)
xgeo = xvals/X
ygeo = yvals/X
xgeokm = pi*R*np.cos(ygeo*pi/180)*xgeo/180
ygeokm = R*pi*yge0/180
ygeokm = R*pi*ygeo/180
print(xgeokm,ygeokm)
print(xgeokm)
print(ygeokm)
quit()
'%0.2d' % (1)
year = 6
'%0.2d' % (year)
quit()
filename = "wrfout_xhka_2019-07-09_08:00:00.t00.nc"
from netCDF4 import Dataset
ls
f = Dataset(filename,'r')
U = f.variables['U']
print(U)
xvals = f.variables['XLONG']
print(xvals)
quit()
1501*200
1501*.2
quit()
path = "/home/sp917/"
    datapath = path + "data/"
    plotpath = path + "plots/"
    date =  year + '-' + day + '-' + month + '_' + hour + ':00:00'
    prefix="UV_interp_"
path = "/home/sp917/"
datapath = path + "data/"
date =  year + '-' + day + '-' + month + '_' + hour + ':00:00'
filename = UV_interp_2019-07-09_08:00:00.t00.nc
filename = "UV_interp_2019-07-09_08:00:00.t00.nc"
from netCDF4 import Dataset
f = Dataset(filename, 'r')
f = Dataset(datapath+filename, 'r')
print(f.variables['U10'])
filename = "UV_interp_2019-07-09_08:00:00.t01.nc"
f = Dataset(datapath+filename, 'r')
print(f.variables['U10'])
filename = "UV_interp_2019-07-09_08:00:00.t12.nc"
f = Dataset(datapath+filename, 'r')
print(f.variables['U10'])
quit()
x = np.array([1,2,3,4,5,6,7,8,9,10])
import numpy as np
x = np.array([1,2,3,4,5,6,7,8,9,10])
x = np.array([0,1,2,3,4,5,6,7,8,9])
xav = np.mean(x[1:3])
print(xav)
quit()
range(1,10,2)
print(range(1,10,2))
x = range(1,10,2)
print(x)
x = range(1,2,10))
x = range(1,2,10)
print(x)
print(x[:])
print(x[0])
print(x[1])
x = range(10)
print(x)
x
x = np.array(x)
import numpy as np
x = np.array(x)
print(x)
x = range(1,10,2)
x = np.array(x)
print(x)
quit()
x = np.array(range(0,20))
import numpy as np
x = np.array(range(0,20))
print(X)
print(x)
print(x[3:10:2]
)
quit()
import wrf
quit()
import wrf
datapath = '/home/sp917/data/'
    files = [Dataset(datapath+f) for f in os.listdir(datapath) if f.startswith('wrfout_xhka')]
files = [Dataset(datapath+f) for f in os.listdir(datapath) if f.startswith('wrfout_xhka')]
import os
files = [Dataset(datapath+f) for f in os.listdir(datapath) if f.startswith('wrfout_xhka')]
from netCDF4 import Dataset
files = [Dataset(datapath+f) for f in os.listdir(datapath) if f.startswith('wrfout_xhka')]
 X = wrf.getvar(files, var, timeidx=wrf.ALL_TIMES, method='join', meta=False)
X = wrf.getvar(files, var, timeidx=wrf.ALL_TIMES, method='join', meta=False)
var = 'wspd_wdir'
X = wrf.getvar(files, var, timeidx=wrf.ALL_TIMES, method='join', meta=False)
print(X.shape)
print(X[0,])
print(X[1,])
print(X)
print(X.shape)
print(X[:,0,0,100,100])
print(X[:,1,0,100,100])
print(X[:,2,0,100,100])
print(X[1,:,0,100,100])
print(X[1,0,:,100,100])
import routines
X = routines.getdata('ua')
print(X.shape)
X = routines.getdata('wspd_wdir10')
print(X.shape)
X = routines.getdata('wspd_wdir')
print(X.shape)
X = routines.getdata('z')
print(X.shape)
np.arange(0,16.5,54)
import numpy as np
np.arange(0,16.5,54)
print(np.arange(0,16.5,54))
print(np.arange(0,16.5,16.5/54))
print(np.arange(1,16.5,16.5/54))
zmax = 16.5
nz = 54
dz = zmax/nz
levels = np.arange(0,zmax+dz,dz)
print(levels.shape)
dz = zmax/(nz-1)
levels = np.arange(0,zmax+dz,dz)
print(levels.shape)
X = routines.getdata('wspd_wdir')
print(X.shape)
xvals = routines.getdata('XLONG')
print(xvals.shape)
t = routines.getdata('times')
print(t)
t = routines.getdata('xtimes')
print(t)
t = routines.getdata('xtimes')/60
print(t)
t = np.array(routines.getdata('xtimes'))/60
print(t)
print(t.shape)
t = np.array(routines.getdata('xtimes'))[:]/60
print(t.shape)
t = np.array(routines.getdata('xtimes')).flatten()/60
print(t.shape)
X = routines.getdata('wspd_wdir')
print(X.shape)
X = X[0,]
print(X.shape)
Xsmooth = wrf.smooth2d(X,10)
xvals = routines.getdata('XLONG')
yvals = routines.getdata('XLAT')
plottitle = 'smooth_test'
plotname = plottitle
plotpath = '../plots/'
routines.plotsmooth(X,Xsmooth,yvals,xvals,plottitle,plotname,plotpath)
module load routines
import routines
routines.plotsmooth(X,Xsmooth,yvals,xvals,plottitle,plotname,plotpath)
reload(routines)
reload(routines)
routines.plotsmooth(X,Xsmooth,yvals,xvals,plottitle,plotname,plotpath)
reload(routines)
routines.plotsmooth(X,Xsmooth,yvals,xvals,plottitle,plotname,plotpath)
reload(routines)
routines.plotsmooth(X,Xsmooth,yvals,xvals,plottitle,plotname,plotpath)
reload(routines)
routines.plotsmooth(X,Xsmooth,yvals,xvals,plottitle,plotname,plotpath)
reload(routines)
routines.plotsmooth(X,Xsmooth,yvals,xvals,plottitle,plotname,plotpath)
reload(routines)
routines.plotsmooth(X,Xsmooth,yvals,xvals,plottitle,plotname,plotpath)
reload(routines)
routines.plotsmooth(X,Xsmooth,yvals,xvals,plottitle,plotname,plotpath)
reload(routines)
routines.plotsmooth(X,Xsmooth,yvals,xvals,plottitle,plotname,plotpath)
print(X.shape)
print(Xsmooth.shape)
X = X[:,0,]
Xsmooth = 
Xsmooth = wrf.smooth2d(X,10)
print(Xsmooth.shape)
routines.plotsmooth(X,Xsmooth,yvals,xvals,plottitle,plotname,plotpath)
reload(routines)
routines.plotsmooth(X,Xsmooth,yvals,xvals,plottitle,plotname,plotpath)
reload(routines)
routines.plotsmooth(X,Xsmooth,yvals,xvals,plottitle,plotname,plotpath)
reload(routines)
routines.plotsmooth(X,Xsmooth,yvals,xvals,plottitle,plotname,plotpath)
print(files_
)
print(files)
lon = routines.getdata('XLONG')
lat = routines.getdata('XLAT')
x_y = wrf.ll_to_xy(files,lat,lon,timeidx=wrf.ALL_TIMES)
print(lon.shape)
print(lat.shape)
print(x_y.shape)
print(580*580)
print(580*580*3)
print(x_y)
x_y = wrf.ll_to_xy(files,lat,lon,timeidx=wrf.ALL_TIMES, as_int=False)
print(x_y.shape)
print(x_y)
x_y = wrf.ll_to_xy(files,lat,lon,timeidx=wrf.ALL_TIMES)
X = np.array([0,1,2,3,4])
J = np.array([10,9,8])
XJ = np.tensordot(X,J ,0)
print(XJ.shape)
print(XJ)
reload(routines)
routines.detrend(X)
X = np.ones((3,4,5))
print(X)
routines.detrend(X)
reload(routines)
routines.detrend(X)
reload(routines)
routines.detrend(X)
reload(routines)
routines.detrend(X)
reload(routines)
routines.detrend(X)
reload(routines)
routines.detrend(X)
print(X.shape)
Y = np.moveaxis(X, [0,1], [1,0])
print(Y.shape)
reload(routines)
routines.detrend(X)
reload(routines)
routines.detrend(X)
reload(routines)
routines.detrend(X)
reload(routines)
routines.detrend(X)
X = [ [1,2,3,4,5,6,7], [2,3,4,5,6,7,8], [3,4,5,6,7,8,9]  ]
X = np.array(X)
routines.detrend(X)
reload(routines)
routines.detrend(X)
np.sum9(X)
np.sum(X)
X = routines.getdata('U')
print(X.shape)
X = routines.getdata('U')
reload(routines)
X = routines.getdata('U')
X = routines.getdata('ua')
reload(routines)
X = routines.getdata('ua')
print(X.shape)
print(X)
reload(routines)
X = routines.getdata('ua')
print(X)
reload(routines)
X = routines.getdata('ua')
reload(routines)
X = routines.getdata('ua')
print(X)
reload(routines)
X = routines.getdata('ua')
print(X)
reload(routines)
X = routines.getdata('ua')
print(X)
reload(routines)
X = routines.getdata('ua')
print(X)
reload(routines)
X = routines.getdata('ua')
reload(routines)
X = routines.getdata('ua')
print(X)
reload(routines)
X = routines.getdata('ua')
print(X)
print(np.min(isnan(X)))
print(np.min(np.isnan(X)))
X = routines.getdata('wspd_wdir')
reload(routines)
X = routines.getdata('wspd_wdir')
reload(routines)
X = routines.getdata('wspd_wdir')
reload(routines)
X = routines.getdata('wspd_wdir')
reload(routines)
X = routines.getdata('wspd_wdir')
reload(routines)
X = routines.getdata('wspd_wdir10')
reload(routines)
X = routines.getdata('wspd_wdir10')
reload(routines)
X = routines.getdata('wspd_wdir10')
print(X)
print(X.shape)
reload(routines)
X = routines.getdata('wspd_wdir10')
print(X)
print(X.shape)
reload(routines)
X = routines.getdata('U')
reload(routines)
X = routines.getdata('U')
reload(routines)
X = routines.getdata('U')
print(X.shape)
X = wrf.destagger(X,-1)
print(X)
print(X.shape)
reload(routines)
X = wrf.destagger(X,-1)
X = routines.getdata('U')
reload(routines)
X = routines.getdata('U')
X = routines.getdata('ua')
X = routines.getdata('wspd_wdir')
reload(routines)
X = routines.getdata('wspd_wdir')
print(X.shape)
print(X)
X = routines.getdata('ua')
print(X)
X = routines.getdata('wspd_wdir10')
X = routines.getdata('wspd_wdir')
datapath = '/home/sp917/data/'
files = [Dataset(datapath+f) for f in os.listdir(datapath) if f.startswith('wrfout_xhka')]
print(files)
print(len(files))
X = wrf.getvar(files, 'wspd_wdir', timeidx=wrf.ALL_TIMES, method=join, meta=True)
X = wrf.getvar(files, 'wspd_wdir', timeidx=wrf.ALL_TIMES, method='join', meta=True)
print(X)
X = wrf.to_np(X)
print(X)
print(X.shape)
Y = wrf.vinterp(files, X, 'ght_msl', 10, 'z', timeidx=wrf.ALL_TIMES)
Y = wrf.vinterp(files, X, 'ght_msl', [10,20], 'z', timeidx=wrf.ALL_TIMES)
Y = wrf.vinterp(files, field=X, vert_coord='ght_msl', interp_levels=[10,20], field_type='z', timeidx=wrf.ALL_TIMES)
X = X[0,0,]
print(X.shape)
X = X[0,]
Y = wrf.vinterp(files, field=X, vert_coord='ght_msl', interp_levels=[10,20], field_type='z', timeidx=wrf.ALL_TIMES)
X = wrf.getvar(files, 'wspd_wdir', timeidx=wrf.ALL_TIMES, method='join', meta=True)
print(X.shape)
Y = wrf.vinterp(files, field=X, vert_coord='ght_msl', interp_levels=[10,20], field_type='z', timeidx=wrf.ALL_TIMES)
Y = wrf.vinterp(files, field=X[0,], vert_coord='ght_msl', interp_levels=[10,20], field_type='z', timeidx=wrf.ALL_TIMES)
print(Y.shape)
print(Y)
Y = wrf.vinterp(files, field=X[0,], vert_coord='ght_msl', interp_levels=[10], field_type='z', timeidx=wrf.ALL_TIMES)
print(Y)
print(np.sum(np.isnan(Y)))
print(np.sum(np.isnan(Y)==True))
z = wrf.getvar(files, 'z', timeidx=wrf.ALL_TIMES, method='join', meta=True)
nz = z.shape[1]
dz = zmax/nz
levs = np.arange(0,zmax,dz)
print(levs)
Y = wrf.vinterp(files, field=X[0,], vert_coord='ght_msl', interp_levels=levs, field_type='z', timeidx=wrf.ALL_TIMES)
print(Y)
levs = np.arange(dz,zmax+dz,dz)
len(levs)
Y = wrf.vinterp(files, field=X[0,], vert_coord='ght_msl', interp_levels=levs, field_type='z', timeidx=wrf.ALL_TIMES)
print(Y)
print(np.sum(np.isnan(Y)))
levs = np.arange(dz,zmax,dz)
Y = wrf.vinterp(files, field=X[0,], vert_coord='ght_msl', interp_levels=levs, field_type='z', timeidx=wrf.ALL_TIMES)
print(Y)
print(np.sum(np.isnan(Y)))
np.isnan(Y)
np.isnan(Y[0,])
np.isnan(Y[0,0])
np.isnan(Y[:,0,])
for y in Y:
if np.isnan(Y):
for y in Y:
	if np.isnan(y):
		print(y)
print(Y.shape)
for i in range(Y.shape[0]):
	for j in range(Y.shape[1]):
		for k in range(Y.shape[2]):
			for l in range(Y.shape[3]):
				if np.isnan(Y[i,j,k,l]):
					print(i,j,k,l)
reload(routines)
X = routines.getdata('wspd_wdir', 10)
reload(routines)
X = routines.getdata('wspd_wdir', 10)
reload(routines)
X = routines.getdata('wspd_wdir', 10)
print(X.shape)
print(X)
np.sum(np.isnan(X))
X10 = routines.getdata('wspd_wdir10', 10)
reload(routines)
X10 = routines.getdata('wspd_wdir10', 10)
print(X10)
print(X10.shape)
print(X.shape)
X = X[:,0,]
print(X.shape)
dX = X - X10
print(dX)
reload(routines)
X = routines.getdata('wspd_wdir', 0.01)
reload(routines)
X = routines.getdata('wspd_wdir', 0.01)
reload(routines)
X = routines.getdata('wspd_wdir', 0.01)
print(X.shape)
X = X[:,0,]
reload(routines)
X10 = routines.getdata('wspd_wdir10', 0.01)
print(X10.shape)
print(X-X10)
print(X)
print(X10)
print(X)
X = routines.getdata('wspd_wdir', 0.01)
print(X)
X = routines.getdata('wspd_wdir', 0.01)
reload(routines)
X = routines.getdata('wspd_wdir', 10)
print(X)
X = routines.getdata('wspd_wdir', 0.1)
X = routines.getdata('wspd_wdir', 0.01)
reload(routines)
print(X)
X = routines.getdata('wspd_wdir', 0.01)
print(X)
reload(routines)
X = routines.getdata('wspd_wdir', 0.01)
reload(routines)
X = routines.getdata('wspd_wdir', 0.01)
print(X)
X = routines.getdata('wspd_wdir', 0.1)
print(X)
X = routines.getdata('wspd_wdir', 10)
print(X)
X10 = routines.getdata('wspd_wdir10', 10)
print(X10)
print(np.sum(np.isnan(X)))
print(int(np.sum(np.isnan(X))))
reload(routines)
X = routines.getdata('wspd_wdir', 1)
X = routines.getdata('wspd_wdir', 0.1)
X = routines.getdata('wspd_wdir', 0.01)
reload(routines)
X = routines.getdata('wspd_wdir10')
print(X.shape)
X = routines.getdata('wspd_wdir', 100)
z = routines.getdata('wspd_wdir')
print(z)
print(z.min)
print(np.min(z))
print(z.shape)
print(z[0,:,0,0])
print(float(np.min(z)))
print(float(np.max(z)))
z = routines.getdata('z')
print(float(np.min(z)))
print(float(np.max(z)))
print(z.shape)
nz = z.shape[1]
zmin = np.min(z)
zmax = np.max(z)
dz = (zmax-zmin)/nz
ls
heights = np.arange(zmin,zmax+dz,dz)
print(len(heights))
dz = (zmax-zmin)/(nz-1)
heights = np.arange(zmin,zmax,dz)
print(len(heights))
heights = np.arange(zmin,zmax+dz,dz)
print(len(heights))
X = routines.getdata('wspd_wdir',interp=True)
reload routines
reload(routines)
X = routines.getdata('wspd_wdir',interp=True)
reload(routines)
X = routines.getdata('wspd_wdir',interp=True)
reload(routines)
X = routines.getdata('wspd_wdir',interp=True)
X = routines.getdata('wspd_wdir',interp=True, height = 1)
reload(routines)
X = routines.getdata('wspd_wdir',interp=True, height = 1)
reload(routines)
X = routines.getdata('wspd_wdir',interp=True, height = 1)
reload(routines)
X = routines.getdata('wspd_wdir',interp=True, height = 1)
reload(routines)
X = routines.getdata('wspd_wdir',interp=True, height = 1)
X = routines.getdata('wspd_wdir',interp=True)
reload(routines)
X = routines.getdata('wspd_wdir',interp=True)
reload(routines)
X = routines.getdata('wspd_wdir',interp=True)
reload(routines)
X = routines.getdata('wspd_wdir',interp=True)
reload(routines)
X = routines.getdata('wspd_wdir',interp=True)
print(X)
X = routines.getdata('wspd_wdir10')
print(X.shape)
xvals = routines.getdata('lon')
yvals = routines.getdata('lat')
print(xvals.shape,yvals.shape)
def addone(a):
	a = a + 1
	return a
a = 3
addone(a)
print(a)
def addone(a):
	a = a + 1
	return 
print(a)
addone(a)
print(a)
print(X.shape)
X = np.moveaxis(X, [1,2], [0,1])
X = np.array(X)
X = np.moveaxis(X, [1,2], [0,1])
print(X.shape)
S = np.zeros((10,X.shape[2:]))
(10) + X.shape[2]
tuple = (10,) + X.shape[2:]
print(tuple)
print(np.shape(np.moveaxis(X,1,2)))
print(np.shape(np.moveaxis(X,2,1)))
a = np.ones((2,3,4))
a = np.moveaxis(a, 1,0)
print(a.shape)
a = np.moveaxis(a, 1,0)
print(a.shape)
a = np.moveaxis(a, 0,1)
print(a.shape)
a = np.moveaxis(a, 0,1)
print(a.shape)
del(tuple)
k = np.array([4,5,6])
K = tuple(k)
print(K)
print(k)
X = routines.getdata('wspd_wdir10')
print(X.shape)
Xfin = X[2,]
Xinit = X[0,]
print(Xfin.shape)
Xfinsmooth = wrf.smooth2d(Xfin,40)
routines.nanwarning(Xfinsmooth)
reload(routines)
routines.nanwarning(Xfinsmooth)
X = routines.getdata('wspd_wdir10')
Xfin = X[2,]
Xinit = X[0,]
Xfinsmooth = wrf.smooth2d(Xfin,40)
dX = Xfin-Xfinsmooth
XinitplusdX = Xinit + dX
yvals = routines.getdata('lat')
xvals = routines.getdata('lon')
print(xvals.shape,yvals.shape)
yvalsinit = yvals[0]
xvalsinit = xvals[0]
print(yvals.shape)
print(yvalsinit.shape)
yvalsfin = yvals[2,]
xvalsfin = xvals[2,]
reload(routines)
Xplots = [Xinit, dX, XinitplusdX]
plotname = "Turbulence_added_smooth40_wspd_wdir10"
routines.quickplots(Xplots, yvalsinit, xvalsinit, plotname)
reload(routines)
routines.quickplots(Xplots, yvalsinit, xvalsinit, plotname)
xvalsinit = wrf.to_np(xvalsinit)
yvalsinit = wrf.to_np(yvalsinit)
Xinit = wrf.to_np(Xinit)
dX = wrf.to_np(dX)
XinitplusdX = wrf.to_np(XinitplusdX)
Xplots = [Xinit, dX, XinitplusdX]
routines.quickplots(Xplots, yvalsinit, xvalsinit, plotname)
reload(routines)
routines.quickplots(Xplots, yvalsinit, xvalsinit, plotname)
titles = [ "Field at time 0", "dX at time 12", "Addition of two fieldsw" ]
titles = [ "Field at time 0", "dX at time 12", "Addition of two fields" ]
reload(routines)
routines.quickplots(Xplots, yvalsinit, xvalsinit, plotname, titles)
def testfun(a):
	a = a+1
	b = a+2
	c = a+3
	return a,b,c
print(testfun(5))
X = testfun(5)
print(X)
print(testfun(5)[0:2])
a,b = testfun(5)[0:2]
print(a)
print(b)
quit()
import routines
import wrf
import numpy as np
X = routines.getdata('wspd_wdir10')
cd ..
quit()
import numpy as np
import wrf
import routines
X = routines.getdata('wspd_wdir')
X = routines.getdata('wspd_wdir10')
xvals = routines.getdata('lon')
yvals = routines.getdata('lat')
X = wrf.to_np(X)
xvals = wrf.to_np(xvals)
yvals = wrf.to_np(yvals)
Xsmooth = wrf.smooth2d(X,40)
dX = X - Xsmooth
print(xvals.shape)
xvals = xvals[0,]
yvals = yvals[0,]
dy,dx = routines.deltayx(yvals,xvals)
K = routines.getK(dy,dx)
print(dy.shape,dx.shape)
xvals = routines.getdata('lon')
yvals = routines.getdata('lat')
xvals = wrf.to_np(xvals)
yvals = wrf.to_np(yvals)
dy,dx = routines.deltayx(yvals,xvals)
K = routines.getK(dy,dx)
print(K.shape)
print(K)
print(len(K))
Kplot = K[0]
print(Kplot.shape)
print(dX.shape)
dX12 = dX[2,]
print(X.shape)
X0 = X[0,]
Xhyb = X0 + dX
reload(routines)
from importlib import reload
reload(routines)
print(xvals.shape)
xvals = xvals[0,]
yvals = yvals[0,]
xvals = routines.getdata('lon')
yvals = routines.getdata('lat')
xvals = wrf.to_np(xvals)
yvals = wrf.to_np(yvals)
dy,dx = routines.deltayx(yvals,xvals)
print(dy.shape,dx.shape)
dyt = dy[:,:,0]
dxt = dx[:,:,0]
S0 = routines.spectrum(X0,dyt,dxt)
S0 = routines.spect1d(X0,dyt,dxt)
S12 = routines.spect1d(dX12,dyt,dxt)
Shyb = routines.spect1d(dXhyb,dyt,dxt)
Shyb = routines.spect1d(Xhyb,dyt,dxt)
Shyb.shape
print(Xhyb.shape)
print(X0.shape)
Xhyb = X0 + dX12
Shyb = routines.spect1d(Xhyb,dyt,dxt)
Splot = [S0, S12, Shyb] 
K = getAkmaxK(dy,dx)[4]
K = routines.getAkmaxK(dy,dx)[4]
K = routines.getAkmaxK(dyt,dxt)[4]
plottitle = 'Spectra for combined field'
plotname = 'Turbulence_added_smooth40_wspd_wdir10'
routines.quickplotspectra(Splot,K,plottitle,plotname)
reload(routines)
routines.quickplotspectra(Splot,K,plottitle,plotname)
reload(routines)
routines.quickplotspectra(Splot,K,plottitle,plotname)
reload(routines)
routines.quickplotspectra(Splot,K,plottitle,plotname)
reload(routines)
routines.quickplotspectra(Splot,K,plottitle,plotname)
quit()
import routines
quit
quit()
import routines
PBLH = getdata('PBLH')
PBLH = routines.getdata('PBLH')
print(PBLH.shape)
quit()
import routines
PBLH = routines.getdata('PBLH')
print(PBLH)
print(np.max(PBLH))
import numpy as np
print(np.max(PBLH))
quit()
import classtest
y, x = np.mgrid[ slice(1,5+0.5, 0.5), slice(0,10+1, 1) ]
import numpy as np
y, x = np.mgrid[ slice(1,5+0.5, 0.5), slice(0,10+1, 1) ]
print(y)
print(y.shape)
print(x.shape)
print(x)
print(x[0,:])
import classtest
data = classtest.DATA('U10')
data.set_height(100)
data.set_smoothness(100)
data.calc_spectra()
data.set_parameters()
from importlib import reload
reload(classtest)
data.set_parameters()
reload(classtest)
data.set_parameters()
reload(classtest)
data.set_parameters()
reload(classtest)
data.set_parameters()
quit()
import classtest
data.set_parameters()
data = classtest.DATA('U10'))
data = classtest.DATA('U10')
data.set_parameters()
data.set_height(100)
data.set_smoothness(100)
data.calc_spectra()
data.set_parameters()
data.add_turbulence(0)
data.spectrum_turb_added()
print(data)
data.print_info
data = classtest.DATA('U10')
reload(classtest)
from importlib import relad
from importlib import reload
reload(classtest)
data = classtest.DATA('U10')
data.print_info()
reload(classtest)
data = classtest.DATA('U10')
data.print_info()
reload(classtest)
data = classtest.DATA('U10')
data.print_info()
data = classtest.DATA('U10')
data.print_info()
reload(classtest)
data = classtest.DATA('U10')
data.print_info()
data.set_height(1000)
data.print_info()
reload(classtest)
data.print_info()
data = classtest.DATA('U10')
data.print_info()
data.set_height(1000)
data.print_info()
data.set_smoothness(100)
data.print_info()
data.calc_spectra(100)
data.calc_spectra()
reload(classtest)
data = classtest.DATA('U10')
data.set_height(1000)
data.calc_spectra()
data.print_info()
data.set_smoothness(100)
data.calc_spectra()
data.print_info()
data.set_parameters()
data.add_turbulence()
data.print_info()
data.spectrum_turb_added()
reload(classtest)
data = classtest.DATA('U10')
data.set_height(1000)
data.set_smoothness(100)
data.calc_spectra()
data.set_parameters()
data.add_turbulence()
data.spectrum_turb_added()
data.print_info()
reload(classtest)
data = classtest.DATA('U10')
data.set_height(1000)
data.set_smoothness(100)
data.calc_spectra()
data.set_parameters()
data.add_turbulence()
data.spectrum_turb_added()
data.print_info()
data.plot_field_turb()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars=P)
P = classtest.params()
reload(classtest)
P = classtest.params()
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars=P)
data.print_info(
)
data.update()
data.print_info()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars=P)
data.print_info()
data.update()
data.print_info()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars=P)
data.print_info()
data.update()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars=P)
data.update()
data.print_info()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars=P)
data.print_info()
data.update()
data.print_info()
data.plot_field_turb()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars=P)
data.update()
data.plot_field_turb()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars=P)
data.plot_field_turb()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars=P)
data.plot_field_turb()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars=P)
data.plot_field_turb()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars=P)
data.plot_field_turb()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars=P)
data.plot_field_turb()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars=P)
data.plot_field_turb()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars=P)
data.plot_field_turb()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars=P)
data.plot_field_turb()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars = Pw)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars = P)
data.plot_field_turb()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars = P)
data.plot_field_turb()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars = P)
data.plot_field_turb()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars = P)
data.plot_field_turb()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars = P)
data.plot_spectra_turb()
reload(classtest)
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars = P)
data.plot_spectra_turb()
reload(classtest)
classtest.plot_spectra_turb(data)
reload(classtest)
classtest.plot_spectra_turb(data)
reload(classtest)
classtest.plot_spectra_turb(data)
reload(classtest)
classtest.plot_spectra_turb(data)
reload(classtest)
classtest.plot_spectra_turb(data)
reload(classtest)
classtest.plot_spectra_turb(data)
reload(classtest)
classtest.plot_spectra_turb(data)
reload(classtest)
classtest.plot_spectra_turb(data)
reload(classtest)
classtest.plot_spectra_turb(data)
classtest.plot_spectra_turb(data, a=10)
reload(classtest)
classtest.plot_spectra_turb(data, a=10)
reload(classtest)
classtest.plot_spectra_turb(data, a=10)
reload(classtest)
classtest.plot_spectra_turb(data, a=10)
reload(classtest)
classtest.plot_spectra_turb(data, a=10)
reload(classtest)
classtest.plot_spectra_turb(data, a=10)
data.set_parameters(mu=1)
classtest.plot_spectra_turb(data, a=10)
classtest.plot_field_turb()
classtest.plot_field_turb(data)
reload(classtest)
classtest.plot_spectra_turb(data, a=10)
P = classtest.params()
data = classtest.DATA('U10', h=1000, passes=100, alt = 0, pars = P)
classtest.plot_spectra_turb(data)
data.set_parameters(mu=1)
classtest.plot_spectra_turb(data)
data.set_parameters(mu=0.75)
classtest.plot_spectra_turb(data)
data.set_parameters(mu=0.6)
classtest.plot_spectra_turb(data)
data.set_parameters(mu=0.5)
classtest.plot_spectra_turb(data)
classtest.plot_field_turb(data)
data.set_parameters(a=1)
classtest.plot_field_turb(data)
classtest.plot_field_spect(data)
classtest.plot_spectra_turb((data)
)
data.set_parameters(mu=0.5)
data.set_parameters(mu=0.25)
classtest.plot_spectra_turb((data)
)
classtest.plot_field_spect(data)
classtest.plot_field_turb((data)
)
data.set_parameters(a=1)
classtest.plot_field_turb(data)
reload(classtest)
data = classtest.DATA('U10', h=0, passes=100, alt = 0, pars=P)
for passes in [50, 100, 1000]:
	data.set_smoothness(passes)
	for alt in [0,1,2]:
for passes in [50, 100, 1000]:
	data.set_smoothness(passes)
	for mu in [0.1, 0.5, 0.25. 0.75 1]:
	for mu in [0.1, 0.5, 0.25. 0.75, 1]:
for passes in [50, 100, 1000]:
	data.set_smoothness(passes)
	for mu in [0.1, 0.5, 0.25, 0.75, 1]:
		for a in [0.1, 1, 10]:
			data.change_parameters(a=a,mu=mu)
			for alt in [0, 1, 2]:
				data.add_turbulence(alt=alt)
				classtest.plot_field_turb()
				classtest.plot_spectra_turb()
reload(classtest)
data = classtest.DATA('U10', h=0, passes=100, alt = 0, pars=P)
for passes in [50, 100, 1000]:
...     data.set_smoothness(passes)
...     for mu in [0.1, 0.5, 0.25, 0.75, 1]:
...             for a in [0.1, 1, 10]:
...                     data.change_parameters(a=a,mu=mu)
...                     for alt in [0, 1, 2]:
...                             data.add_turbulence(alt=alt)
...                             classtest.plot_field_turb()
...                             classtest.plot_spectra_turb()
...     for mu in [0.1, 0.5, 0.25, 0.75, 1]:
for passes in [50, 100, 1000]:
...     for mu in [0.1, 0.5, 0.25, 0.75, 1]:
for passes in [50, 100, 1000]:
	data.set_smoothness(passes)
	for mu in [0.1, 0.5, 0.25, 0.75, 1]:
		for a in [0.1, 1, 10]:
			data.change_parameters(a=a,mu=mu)
			for alt in [0, 1, 2]:
				data.add_turbulence(alt=alt)
				classtest.plot_field_turb()
				classtest.plot_spectra_turb()
for passes in [50, 100, 1000]:
	data.set_smoothness(passes)
	for mu in [0.1, 0.5, 0.25, 0.75, 1]:
		for a in [0.1, 1, 10]:
			data.change_parameters(a=a,mu=mu)
			for alt in [0, 1, 2]:
				data.add_turbulence(alt=alt)
				classtest.plot_spectra_turb(data)
for passes in [50, 100, 1000]:
	data.set_smoothness(passes)
	for mu in [0.1, 0.5, 0.25, 0.75, 1]:
		for a in [0.1, 1, 10]:
			data.change_parameters(a=a,mu=mu)
			for alt in [0, 1, 2]:
				data.add_turbulence(alt=alt)
				classtest.plot_spectra_turb(data)
				classtest.plot_field_turb(data)
reload(classtest)
data = classtest.DATA('U10', h=0, passes=100, alt = 0, pars=P)
passes = 1000
a = 1
alt = 2
for mu in [1.1, 1.2, 1.5, 2]:
	data.change_parameters(mu=mu)
data.alt=2
data.passes=1000
for mu in [1.1, 1.2, 1.5, 2]:
	data.change_parameters(mu=mu)
	classtest.plot_field_turb(data)
	classtest.plot_spectra_turb(data)
data.set_smoothness(1000)
data.add_turbulence(alt=2)
for mu in [1.1, 1.2, 1.5, 2]:
	data.change_parameters(mu=mu)
	classtest.plot_field_turb(data)
	classtest.plot_spectra_turb(data)
data.change_parameters(mu=1.75)
classtest.plot_spectra_turb(data)
data.add_turbulence(alt=1)
classtest.plot_spectra_turb(data)
classtest.plot_field_turb(data)
data.change_parameters(mu=1)
classtest.plot_field_turb(data)
classtest.plot_spectra_turb(data)
data.add_turbulence(alt=3)
classtest.plot_field_turb(data)
classtest.plot_spectra_turb(data)
data.change_parameters(mu=0.5)
classtest.plot_spectra_turb(data)
classtest.plot_field_turb(data)
data.change_parameters(a=1)
P = classtest.params()
classtest.plot_spectra_turb(data)
classtest.plot_field_turb(data)
data.add_turbulence(alt=1)
classtest.plot_spectra_turb(data)
data.change_parameters(mu=1.75)
data.add_turbulence(alt=2)
classtest.plot_spectra_turb(data)
classtest.plot_field_turb(data)
data.add_turbulence(alt=1)
classtest.plot_field_turb(data)
classtest.plot_spectra_turb(data)
classtest.plot_field_turb(data)
data.change_parameters(a=0.1)
classtest.plot_field_turb(data)
classtest.plot_spectra_turb(data)
for alt in [0, 3]:
	dat
for alt in [0, 3]:
	for mu in [0.9, 0.95, 1, 1.5, 1.1]:
		data.change_parameters(mu=mu, alt=alt)
		classtest.plot_field_turb(data)
		classtest.plot_spectra_turb(data)
reload classtest
reload(classtest)
data = classtest.DATA('U10')
data.set_height()
data.set_height(1)
data.set_smoothness(1000)
for alt in [0, 3]:
	for mu in [0.9, 0.95, 1, 1.5, 1.1]:
		data.change_parameters(mu=mu, alt=alt)
		classtest.plot_field_turb(data)
		classtest.plot_spectra_turb(data)
data.set_parameters()
for alt in [0, 3]:
	for mu in [0.9, 0.95, 1, 1.5, 1.1]:
		data.change_parameters(mu=mu, alt=alt)
		classtest.plot_spectra_turb(data)
		classtest.plot_field_turb(data)
	for mu in [0.4, 0.45, 0.5, 0.55, 0.6]:
for alt in [0, 3]:
	for mu in [0.4, 0.45, 0.5, 0.55, 0.6]:
		data.change_parameters(mu=mu, alt=alt)
		classtest.plot_spectra_turb(data)
		classtest.plot_field_turb(data)
for alt in [1, 2]:
	for mu in [0.9, 0.95, 1, 1.05, 1.1]:
		data.change_parameters(mu=mu, alt=alt)
		classtest.plot_spectra_turb(data)
		classtest.plot_field_turb(data)
data = classtest.DATA('tc')
data.set_height(100)
print(data.X)
print(data.Xinterp)
data = classtest.DATA('tc')
reload(classtest)
data = classtest.DATA('tc')
data.set_height(100)
data.set_height(1000)
data.set_smoothness(1000)
data.set_parameters(alt=1)
reload(classtest)
data = classtest.DATA('tc', height=1000, passes=1000, alt=1)
data = classtest.DATA('tc', h=1000, passes=1000, alt=1)
data.set_parameters()
data.print_info()
data.add_turbulence(data.alt)
reload(classtest)
data = classtest.DATA('tc', h=1000, passes=1000, alt=1)
data.set_parameters(alt=1)
reload(classtest)
data = classtest.DATA('tc', h=1000, passes=1000, alt=1)
data.set_parameters(alt=1)
classtest.plot_spectra_turb(data)
classtest.plot_field_turb(data)
data.set_parameters(alt=2)
classtest.plot_spectra_turb(data)
classtest.plot_field_turb(data)
data.pars.scaling(self.h)
data.pars.scaling(data.h)
data.dX
dXfin= data.dX[-1,]
print(dXfin)
X0 = data.Xinterp[0,]
Xhy = X0*(1 + scaling*dXfin/np.max(np.abs(dXfin)))
scaling=data.pars.scaling(data.h)
Xhy = X0*(1 + scaling*dXfin/np.max(np.abs(dXfin)))
import numpy as np
Xhy = X0*(1 + scaling*dXfin/np.max(np.abs(dXfin)))
print(Xhy)
print(X0)
print(data.Xinterp[-1,])
print(data.Xinterp[0,])
print(data.dX[0,])
print(np.max(dX))
print(np.max(data.dX))
print(np.min(data.dX))
print(self.Xhy)
print(data.Xhy)
reload(classtest)
data = classtest.DATA('tc', h=1000, passes=1000, alt=1)
data.set_parameters(alt=2, mu=1)
classtest.plot_spectra_turb(data)
classtest.plot_field_turb(data)
reload(classtest)
classtest.plot_field_turb(data)
reload(classtest)
classtest.plot_field_turb(data)
reload(classtest)
classtest.plot_field_turb(data)
plt.close()
reload(classtest)
classtest.plot_field_turb(data)
reload(classtest)
classtest.plot_field_turb(data)
reload(classtest)
classtest.plot_field_turb(data)
print(data.Xhy)
print(np.max(data.Xhy))
scaling=data.pars.scaling(1000)
print(scaling)
dXfin = data.dX[-1,]
print(np.max(dXfin))
X0 = data.Xinterp[0,]
print(np.max(Xinterp))
print(np.max(data.Xinterp))
Xhy = X0*(1 + scaling*dXfin/np.max(np.abs(dXfin)))
print(np.max(Xhy))
reload(classtest)
classtest.plot_field_turb(data)
data.change_parameters(mu=0.5, alt=1, b=1000, a=0.001)
classtest.plot_field_turb(data)
import matplotlib.pyplot as plt
plt.close()
classtest.plot_spectra_turb(data)
data.change_parameters(a=0.0001)
classtest.plot_spectra_turb(data)
data.change_parameters(a=0.001, d=-100w)
data.change_parameters(a=0.001, d=-100)
classtest.plot_spectra_turb(data)
data.change_parameters(a=0.001, d=-1)
data.change_parameters(b=-500)
data.change_parameters(b=500)
classtest.plot_spectra_turb(data)
data.change_parameters(b=300)
classtest.plot_spectra_turb(data)
classtest.plot_field_turb(data)
data.set_height(h=100)
reload(classtest)
data = classtest.DATA('tc')
data.set_height(10)
data.set_smoothness(1000)
data.set_parameters(mu=0.5, a = 0.001, b = 300, c=0, d=-1, e=1)
classtest.plot_spectra_turb(data)
print(data.Xinterp)
np.sum(np.isnan(Xinterp))
print(np.sum(np.isnan(data.Xinterp)))
print(data.Xinterp.shape)
3*580*580
print(np.size(Xinterp))
print(np.size(dataXinterp))
print(np.size(data.Xinterp))
data.set_height(100)
data.print_info()
reload(classtest)
data = classtest.DATA('tc', passes=1000, h=100)
data.set_parameters()
classtest.plot_spectra_turb(data)
classtest.plot_field_turb((data)
)
reload(classtest)
classtest.plot_field_turb((data)
)
reload(classtest)
classtest.plot_field_turb((data)
)
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
A = [ [1,2,np.nan], [np.nan, np.nan, 0], [4,5,7]  ]
A = np.array(A)
print(A)
where = np.isnan(A)
print(where)
notnan = 1 - where
print(notnan)
print(logical(notnan))
print(bool(notnan))
print(notnan==1)
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
data = classtest.DATA('tc')
data.set_height(h=100)
data.set_smoothness(passes=1000)
data.set_parameters(mu=0.5, b=500)
classtest.plot_field_turb((data))
plt.close()
print(data.Xsmooth)
np.min(Xsmooth)
np.min(data.Xsmooth)
np.max(data.Xsmooth)
np.min(data.Xsmooth[-1,])
np.max(data.Xsmooth[-1,])
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
plt.close("all")
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
A = [ [1,2,np.nan], [np.nan, np.nan, 0], [4,5,7]  ]
A = np.array(A)
wherenans = np.isnan(A)
print(wherenans)
notnans = (1-wherenans)==1
print(notnans)
B = A[notnans]
print(B)
print(wherenans)
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
A[wherenans]=0
print(A)
reload(classtest)
classtest.plot_field_turb((data))
reload(classtest)
classtest.plot_field_turb((data))
quit
quit()
import addturb as at
TH2 = at.DATA('TH2', h=100, passes=1000, pars=at.params(mu=0.5, c=1, a=0.001, b|
=500, alt=4), scaling_type='tanh_alt', ncl=True)
TH2 = at.DATA('TH2', h=100, passes=1000, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(classtest)
from importlib import reload
reload(classtest)
reload(ct)
reload(at)
TH2 = at.DATA('TH2', h=100, passes=1000, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
TH2 = at.DATA('TH2', h=100, passes=1000, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
TH2 = at.DATA('TH2', h=100, passes=1000, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
TH2 = at.DATA('TH2', h=100, passes=1000, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
/plot_sp
reload(at)
TH2 = at.DATA('TH2', h=100, passes=1000, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
TH2 = at.DATA('TH2', h=100, passes=1000, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
TH2 = at.DATA('TH2', h=100, passes=1000, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
TH2 = at.DATA('TH2', h=100, passes=1000, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
TH2 = at.DATA('TH2', h=100, passes=100, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
T = at.DATA('T', h=100, passes=100, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
T = at.DATA('T', h=100, passes=100, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
T = at.DATA('T', h=1000, passes=100, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
U10
U10 = at.DATA('U10', h=1000, passes=100, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
V10 = at.DATA('V10', h=1000, passes=100, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
speed10 = at.DATA('speed10', h=1000, passes=100, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
speed10 = at.DATA('speed10', h=1000, passes=100, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
ke10 = at.DATA('ke10', h=1000, passes=100, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
TH2 = at.DATA('TH2', h=100, passes=100, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
TH2 = at.DATA('TH2', h=100, passes=100, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
speed10 = at.DATA('speed10', h=100, passes=100, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
/ncl
reload(at)
TH2 = at.DATA('TH2', h=100, passes=100, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
TH2 = at.DATA('TH2', h=100, passes=100, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
TH2 = at.DATA('TH2', h=100, passes=100, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
TH2 = at.DATA('TH2', h=100, passes=100, pars=at.params(mu=0.5, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
T2.change_paramters(mu=1)
TH2.change_paramters(mu=1)
TH2.change_parameters(mu=1)
T = at.DATA('T', h=100, passes=100, pars=at.params(mu=1, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
T = at.DATA('T', h=100, passes=100, pars=at.params(mu=1, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
T.set_height(1000)
print(r"$x^{2}=y$")
print(r"$x^{%d}=y$" % 2)
reload(at)
T.set_height(2000)
reload(at)
T.set_height(2000)
reload(at)
T = at.DATA('T', h=2000, passes=100, pars=at.params(mu=1, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
T = at.DATA('T', h=2000, passes=100, pars=at.params(mu=1, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
/get_ti
reload(at)
T = at.DATA('T', h=2000, passes=100, pars=at.params(mu=1, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
T = at.DATA('T', h=2000, passes=100, pars=at.params(mu=1, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
T = at.DATA('T', h=2000, passes=100, pars=at.params(mu=1, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
T = at.DATA('T', h=2000, passes=100, pars=at.params(mu=1, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
T.set_height(3000)
T.set_height(4000)
reload(at)
T.set_height(5000)
at.plot_spectra_turb(U10)
U10 = at.DATA('U10', h=2000, passes=100, pars=at.params(mu=1, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
reload(at)
at.plot_spectra_turb(U10)
reload(at)
reload(at)
at.plot_spectra_turb(U10)
reload(at)
at.plot_spectra_turb(U10)
reload(at)
at.plot_spectra_turb(U10)
reload(at)
at.plot_spectra_turb(U10)
reload(at)
at.plot_spectra_turb(U10)
reload(at)
at.plot_spectra_turb(U10)
reload(at)
at.plot_spectra_turb(U10)
reload(at)
at.plot_spectra_turb(U10)
reload(at)
at.plot_spectra_turb(U10)
speed10 = at.DATA('speed10', h=2000, passes=100, pars=at.params(mu=1, c=1, a=0.001, b=500, alt=4), scaling_type='const', ncl=True)
at.plot_spectra_turb(speed10)
reload(at)
at.plot_spectra_turb(speed10)
reload(at)
at.plot_spectra_turb(speed10)
reload(at)
at.plot_spectra_turb(speed10)
reload(at)
at.plot_spectra_turb(speed10)
reload(at)
at.plot_spectra_turb(speed10)
reload(at)
at.plot_spectra_turb(speed10)
reload(at)
at.plot_spectra_turb(speed10)
reload(at)
at.plot_spectra_turb(speed10)
reload(at)
at.plot_spectra_turb(speed10)
reload(at)
at.plot_spectra_turb(speed10)
import addturb as at
quit()
import addturb as at
from importlib import reload
import numpy as np
T = at.DATA('T', h=100, pars=at.params(a=0.001,b=500,c=1,d=-1,e=1,mu=1,alt=4), scaling_type='c', passes=100)
T.ncl=True
T.update()
T.set_smoothness(50)
for passes in [1, 10, 20, 30, 50, 75, 100, 1000]:
	T.set_smoothness(passes)
reload(at)
for passes in [1, 10, 20, 30, 50, 75, 100, 1000]:
	T.set_smoothness(passes)
for mu in [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1]:
	T.change_parameters(mu=mu)
reload(at)
for mu in [0, 0.1, 0.2, 0.3, 0.4]:
	T.change_parameters(mu=mu)
T.set_smoothness(1000)
for mu in [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0]:
	T.change_parameters(mu=mu)
for h in [200, 400, 600, 800, 1000, 1200, 1500, 1750, 2000, 4000, 8000, 16000]:
	T.change_options(autoplot=False)
	T.set_height(h)
	T.change_options(autoplot=True)
	for mu in [0.25, 0.5, 0.75, 1.0, 1.25, 1.5]:
		T.change_parameters(mu=mu)
reload(at)
for h in [200, 400, 600, 800, 1000, 1200, 1500, 1750, 2000, 4000, 8000, 16000]:
	T.change_options(autoplot=False)
	T.set_height(h)
	T.change_options(autoplot=True)
	for mu in [0.25, 0.5, 0.75, 1.0, 1.25, 1.5]:
		T.change_parameters(mu=mu)
reload(at)
T.change_height(300)
T.set_height(300)
T.change_parameters(mu=0.5)
reload(at)
at.plot_field_turb(T)
reload(at)
at.plot_field_turb(T)
reload(at)
at.plot_field_turb(T)
reload(at)
at.plot_field_turb(T)
reload(at)
at.plot_field_turb(T)
reload(at)
at.plot_field_turb(T)
reload(at)
at.plot_field_turb(T)
reload(at)
at.plot_field_turb(T)
reload(at)
at.plot_field_turb(T)
reload(at)
at.plot_field_turb(T)
T.set_height(100)
reload(at)
T.change_parameters(mu=1)
T.change_parameters(mu=0.5)
for h in [200,300,400,500,600,800,1000,1250,1500]:
	T.set_height(h)
T.set_height(1250)
T.set_smoothness(100)
Tsmooth = copy(T)
Tsmooth = T
Tsmooth.str_id = Tsmooth_100
Tsmooth.str_id = 'Tsmooth_100'
Tsmooth.X = T.Xsmooth
T.set_smoothness(900)
T.set_smoothness(500)
T = at.DATA('T', h=1250, pars=at.params(a=0.001,b=500,c=1,d=-1,e=1,mu=0.5,alt=4), scaling_type='c', passes=500)
T.ncl=True
T.update()
T.set_smoothness(250)
T.set_smoothness(100)
import copy
Tnew = 
Tnew = at.DATA('T', h=1250, pars=at.params(a=0.001,b=500,c=1,d=-1,e=1,mu=0.5,alt=4), scaling_type='c', passes=100, ncl=True)
Tnew.str_id=Tnew
Tnew.X[-1,] = Tnew.X[-1,] - Tnew.Xsmooth[-1,]
Tnew.set_smoothness(100)
Tnew.str_id='Tnew'
Tnew.X[-1,] = Tnew.X[-1,] - Tnew.Xsmooth[-1,]
Tnew.set_smoothness(100)
T.set_smoothness(10)
Tnew.X[-1,] = T.X[-1,] - T.Xsmooth[-1,]
T.set_smoothness(100)
T.set_smoothness(10)
Tnew.X[-1,] = T.X[-1,] - T.Xsmooth[-1,]
import os
os.system("rm ../data/Tnew.npy")
Tnew.set_smoothness(100)
Tnew.X=T.X
T.update()
Tnew.update()
Tnew = at.DATA('T', h=1250, pars=at.params(a=0.001,b=500,c=1,d=-1,e=1,mu=0.5,alt=4), scaling_type='c', passes=100, ncl=True)
Tnew.str_id='Tnew'
Tnew.X = T.X
Tnew.update()
Tnew.X[-1] = T.dX[-1]
Tnew.set_smoothness(10)
for h in [125, 150, 175, 250, 300, 350]:
	for mu in [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]:
for h in [125, 150, 175, 250, 300, 350]:
	T.autoplot=False
	T.set_height(h)
	T.autoplot=True
	for mu in [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]:
		T.change_parameters(mu=mu)
T = at.DATA('T', h=1250, pars=at.params(a=0.001,b=500,c=1,d=-1,e=1,mu=0.5,alt=4), scaling_type='c', passes=1000, ncl=True)
for h in [125, 150, 175, 250, 300, 350]:
	T.autoplot=False
	T.set_height(h)
	T.autoplot=True
	for mu in [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]:
		T.change_parameters(mu=mu)
T.change_parameters(mu=-0.5)
T2 = at.DATA('T2', h=100, pars=at.params(a=0.001,b=500,c=1,d=-1,e=1,mu=0.5,alt=4), scaling_type='c', passes=1000, ncl=True)
for mu in [0.1, 0.2, 0.3, 0.4]:
	T2.change_parameters(mu=mu)
T2.change_parameters(mu=0.45)
ke = at.DATA('ke', h=100, pars=at.params(a=0.001,b=500,c=1,d=-1,e=1,mu=0.5,alt=4), scaling_type='c', passes=1000, ncl=True)
reload(at)
at.plot_field_turb(ke)
reload(at)
at.plot_field_turb(ke)
reload(at)
at.plot_field_turb(ke)
for h in [100,200,400,600,800,1000,2000,4000,6000,8000,10000,12000,14000,16000]:
	ke.autoplot=False
	ke.set_height(h)
	ke.autoplot=True
	for mu in [0.25, 0.5, 0.75, 1, 1.25]:
		ke.change_parameters(mu=mu)
reload(at)
speed = at.DATA('speed', h=100, pars=at.params(a=0.001,b=500,c=1,d=-1,e=1,mu=0.75,alt=4), scaling_type='c', passes=1000, ncl=True)
reload(at)
speed = at.DATA('speed', h=100, pars=at.params(a=0.001,b=500,c=1,d=-1,e=1,mu=0.75,alt=4), scaling_type='c', passes=1000, ncl=True)
for h in [100,200,400,600,800,1000,2000,4000,6000,8000,10000,12000,14000,16000]:
	speed.autoplot=False
	speed.set_height(h=h)
for h in [100,200,400,600,800,1000,2000,4000,6000,8000,10000,12000,14000,16000]:
	speed.set_height(h)
for h in [7000, 9000, 11000, 13000, 15000]:
	speed.set_height(h)
for h in [10500,11500,12500,13500,14500,15500,7500,8500,9500]:
	speed.set_height(h)
for h in [1200,1400,1600,1800]:
	speed.set_height(h)
QV = at.DATA('QVAPOR', h=100, pars=at.params(a=0.001,b=500,c=1,d=-1,e=1,mu=0.75,alt=4), scaling_type='c', passes=1000, ncl=True)
for h in [200, 400, 600, 800, 1000, 2000, 4000, 8000, 16000]:
	QV.set_height(h)
QV.change_parameters(mu=0.5)
for h in [100,200, 400, 600, 800, 1000, 2000, 4000, 8000]:
	QV.set_height(h)
for mu in [-0.5,-0.25, 0.25, 1.0]:
	QV.change_parameters(mu=mu)
QV.set_height(16000)
for mu in [0.1, -0.1, 0.2, -0.2, 0.3, -0.3, 0.4, -0.4, -0.5, 2, -2]:
	QV.change_parameters(mu=mu)
for h in [1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,300,500,700,900]:
QV.change_parameters(mu=0.5)
for h in [1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,300,500,700,900]:
	QV.set_height(h)
reload at
reload(at)
for h in [1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,300,500,700,900, 100, 200, 300, 400, 500, 600, 700, 800, 900, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000]:
	QV.set_height(h)
W = at.DATA('W', h=100, pars=at.params(a=0.001,b=500,c=1,d=-1,e=1,mu=0.75,alt=4), scaling_type='c', passes=1000, ncl=True)
for mu in [0.75, 1, 1.25]:
	W.change_parameters(mu=mu)
	W.change_parameters(mu=0.5)
W.change_parameters(mu=0.5)
for h in [200, 400, 600, 800, 1000, 2000, 4000, 8000, 16000]:
	W.set_height(h)
W.set_smoothness(100)
for h in [200, 400, 600, 800, 1000, 2000, 4000, 8000, 16000]
for h in [200, 400, 600, 800, 1000, 2000, 4000, 8000, 16000]:
	W.set_height(h)
W.set_height(1000)
for mu in [0.1, 0.75, 1, 2, 10, 20]:
	W.change_parameters(mu=mu)
W.set_smoothness(1000)
for mu in [0.1, 0.5,  0.75, 1, 2, 10, 20]:
	W.change_parameters(mu=mu)
import addturb as at
U10 = at.DATA('U10', passes=1000, h=10, pars=at.params(mu=1, alt=4), scaling_type='constant', ncl=True) 
U10.print_info()
quit()
import addturb as at
U10 = at.DATA('U10', passes=1000, h=10, pars=at.params(mu=1, alt=4), scaling_type='constant', ncl=True) 
U10.change_parameters(mu=0.75)
V10 = at.DATA('V10', passes=1000, h=10, pars=at.params(mu=1, alt=4), scaling_type='constant', ncl=True) 
speed10 = at.DATA('speed10', passes=1000, h=10, pars=at.params(mu=1, alt=4), scaling_type='constant', ncl=True) 
speed10.change_parameters(mu=.75)
ke10 = at.DATA('ke10', passes=1000, h=10, pars=at.params(mu=1, alt=4), scaling_type='constant', ncl=True) 
10.change_parameters(mu=.75)
ke10.change_parameters(mu=.75)
TH2 = at.DATA('TH2', passes=1000, h=10, pars=at.params(mu=1, alt=4), scaling_type='constant', ncl=True) 
TH2.change_parameters(mu=0.5)
from netCDF4 import Dataset
f = Dataset("wrfinput_d01_new", 'r+')
f = Dataset("wrfinput_d01_new", 'w')
import os
os.system("pwd")
f = Dataset("wrfinput_d01_new.nc", 'w')
f = Dataset("./wrfinput_d01_new.nc", 'w')
f = Dataset("./wrfinput_d01_new.nc", 'r+')
quit
quit()
from netCDF4 import Dataset
f = Dataset("wrfinput_d01_new.nc")
U = f.variables['U']
V = f.variables['V']
T = f.variables['T']
QVAPOR = f.varibles['QVAPOR']
QVAPOR = f.variables['QVAPOR']
import modify
quit()
q
import modify
quit9)
quit()
import modify
from netCDF4 import Dataset
f = Dataset("wrfinput_d01_new.nc")
U = f.variables['U']
V = f.variables['V']
T = f.variables['T']
QVAPOR = f.variables['QVAPOR']
modify.modfields(1000)
from importlib import reload
reload(modify)
modify.modfields(1000)
reload(modify)
modify.modfields(1000)
del U, V, T, QVAPOR
modify.modfields(1000)
quit()
import mdodify
import modify
quit()
import modify
modify.modfields(1000)
from importlib import reload
reload(modify)
modify.modfields(1000)
reload(modify)
modify.modfields(1000)
from netCDF4 import Dataset
f = Dataset("wrfinput_d01_new", 'r')
f = Dataset("wrfinput_d01_new.nc", 'r')
U1 = f.variables[U]
U1 = f.variables['U']
f2 = Dataset("wrfout_xhka_2019-07-09_08:00:00.t00.nc")
f2 = Dataset("../data/wrfout_xhka_2019-07-09_08:00:00.t00.nc")
U2 = f2.variables['U']
print(U1-U2)
import numpy as np
print(np.array(U1)-np.array(U2))
quit()
import addturb as at
U10 = at.DATA('U10', initialise='Basic')
at.plot_field(U10)
U10.print_info()
from importlib import reload
reload(at)
U10 = at.DATA('U10', initialise='Basic')
U10.print_info()
at.plot_field(U10)
reload(at)
U10 = at.DATA('U10', initialise='Basic')
at.plot_field(U10)
U10 = at.DATA('U10', initialise='Basic', whichdata='control_run')
reload(at)
U10 = at.DATA('U10', initialise='Basic', whichdata='control_run')
at.plot_field(U10)
U10.calc_spectra()
reload(at)
U10 = at.DATA('U10', initialise='Basic', whichdata='control_run')
U10.calc_spectra()
at.plot_spectra(U10)
reload(at)
at.plot_spectra(U10)
reload(at)
at.plot_spectra(U10)
U10 = at.DATA('U10', initialise='Basic', whichdata='original')
at.plot_spectra(U10)
U10.calc_spectra()
at.plot_spectra(U10)
	q	
import addturb as at
quit()
import addturb as at
ls
from importlib import reload
reload(At)
reload(at)
U10 = at.DATA('U10', initialise='Basic')
U10.calc_spectra()
at.plot_field(U10)
U10.whichdata='modified_run'
U10.update()
U10.print_info()
print(U10.S)
reload(at)
U10 = at.DATA('U10', initialise='Basic', whichdata='modified_run')
U10.calc_spectra()
reload(at)
U10 = at.DATA('U10', initialise='Basic', whichdata='control_run')
reload(at)
U10 = at.DATA('U10', initialise='Basic', whichdata='control_run')
quit()
import addturb as at
from importlib import reload
U = at.DATA("U")
U = at.DATA("U", passes=1000, h=100, pars=at.params(mu=0.5), initialise="Full", ncl=True)
U = at.DATA("ua", passes=1000, h=100, pars=at.params(mu=0.5), initialise="Full", ncl=True)
import addturb as at
from importlib import reload
U = at.DATA("ua", passes=1000, h=100, pars=at.params(mu=0.5), initialise="Full", ncl=True)
U = at.DATA("ua", passes=1000, h=100, pars=at.params(mu=0.5, alt=4), initialise="Full", ncl=True)
for mu in [0.75, 1.0]:
	U.change_parameters(mu=mu)
for mu in [0.9, 1.1]:
	U.change_parameters(mu=mu)
U.change_parameters(mu=1.25)
U.change_parameters(mu=1.5)
wspd = at.DATA("wspd", passes=1000, h=100, pars=at.params(mu=0.5, alt=4), initialise="Full", ncl=True)
speed = at.DATA("speed", passes=1000, h=100, pars=at.params(mu=0.5, alt=4), initialise="Full", ncl=True)
speed.change_parameters(mu=1.0)
for mu in [0.75, 1.25]:
	speed.change_parameters(mu=mu)
for h in [1000]:
	speed.set_height(h=h)
for mu in [0.75, 1.00, 1.25]:
	speed.change_parameters(mu=mu)
speed.set_height(h=2000)
for mu in [0.75, 1.00]:
	speed.change_parameters(mu=mu)
print(U.X.shape)
print(speed.X.shape)
print(speed.Xsmooth.shape)
dXall = speed.X - speed.Xsmooth
ratio = dXall/speed.Xsmooth
print(ratio)
print(dXall)
print(np.max(dXall))
import numpy as np
print(np.max(dXall))
print(ratio[0,])
print(ratio[1,])
print(ratio[2,])
speed.print_info()
print(np.max(dXall))
print(np.min(dXall))
print(np.mean(dXall))
print(np.mean(dXall[0,]))
print(np.mean(dXall[1,]))
print(np.mean(dXall[2,]))
for t in [0,1,2]:
	print(np.mean(np.abs(dXall[i,])))
	print(np.mean(np.abs(dXall[t,])))
for t in [0,1,2]:
	print(np.mean(np.abs(dXall[t,])))
speed.whichdata="control_run"
speed.update()
dXall = speed.X - speed.Xsmooth
for t in range:
	print(np.mean(np.abs(dXall[t,])))
speed.change_options(whichdata="control_run")
reload(at)
speed = at.DATA('speed', h=100, passes=1000, intialise="Full")
speed = at.DATA('speed', h=100, passes=1000, initialise="Full")
dXall = speed.X - speed.Xsmooth
print(dXall)
print(np.max(np.abs(dX),0))
print(np.max(np.abs(dXall),0))
print(np.max(np.abs(dXall),0).shape)
print(np.max(np.abs(dXall),(1,2,3)).shape)
print(np.max(np.abs(dXall),(1,2,3)))
print(np.mean(np.abs(dXall),(1,2,3)))
print(np.mean(np.abs(dXall/speed.Xsmooth),(1,2,3)))
reload(at)
speed = at.DATA('speed', h=100, passes=1000, initialise="Full")
print(speed.ratio)
print(speed.turb_ratio)
for mu in [0, 0.5, 0.75, 1, 1.25, 1.5, 2]:
	speed.change_parameters(mu=mu)
for mu in [0, 0.5, 0.75, 1, 1.25, 1.5, 2]:
reload(at)
for mu in [0, 0.5, 0.75, 1, 1.25, 1.5, 2]:
	speed.change_parameters(mu=mu)
	at.plot_field(speed, ratioplot=True)
for mu in [0, 0.5, 0.75, 1, 1.25, 1.5, 2]:
speed.change_options(autoplot=False)
reload(at)
for mu in [0, 0.5, 0.75, 1, 1.25, 1.5, 2]:
	speed.change_parameters(mu=mu)
	at.plot_field(speed, ratioplot=True)
speed = at.DATA('speed', h=100, passes=1000, initialise="Full")
speed = at.DATA('speed', h=100, passes=1000)
for mu in [0, 0.5, 0.75, 1, 1.25, 1.5, 2]:
speed.autoplot=False
for mu in [0, 0.5, 0.75, 1, 1.25, 1.5, 2]:
	speed.change_parameters(mu=mu)
	at.plot_field(speed, ratioplot=True)
for mu in [0, 0.5, 0.75, 1, 1.25, 1.5, 2]:
reload(at)
for mu in [0, 0.5, 0.75, 1, 1.25, 1.5, 2]:
	speed.change_parameters(mu=mu)
	at.plot_field(speed, ratioplot=True)
for mu in [0, 0.5, 0.75, 1, 1.25, 1.5, 2]:
	speed.change_parameters(mu=mu)
	at.plot_field(speed, ratioplot=False)
reload(at)
	speed.change_parameters(mu=mu)
	at.plot_field(speed, ratioplot=True)
reload(at)
speed = at.DATA('speed', h=100, passes=1000, initialise="Basic")
speed.set_smoothness(1000)
at.plot_field(speed, ratioplot=True)
reload(at)
at.plot_field(speed, ratioplot=True)
for h in [100,200,400,600,800,1000,2000,4000,8000,16000]:
	speed.set_height(h)
speed.change_options(autoplot=False)
for h in [100,200,400,600,800,1000,2000,4000,8000,16000]:
	speed.set_height(h)
	at.plot_field(speed, ratioplot=True)
reload(at)
for h in [100,200,400,600,800,1000,2000,4000,8000,16000]:
speed = at.DATA('speed', h=100, passes=1000, initialise="Partial", autoplot=False)
for h in [100,200,400,600,800,1000,2000,4000,8000,16000]:
	speed.set_height(h)
	at.plot_field(speed, ratioplot=True)
reload(at)
for h in [100,200,400,600,800,1000,2000,4000,8000,16000]:
	speed.set_height(h)
	at.plot_field(speed, ratioplot=True)
for h in [100,200,400,600,800,1000,2000,4000,8000,16000]:
	speed.set_height(h)
at.plot_field(speed, ratioplot=True)
reload(at)
at.plot_field(speed, ratioplot=True)
reload(at)
at.plot_field(speed, ratioplot=True)
reload(at)
at.plot_field(speed, ratioplot=True)
reload(at)
at.plot_field(speed, ratioplot=True)
import addturb as at
from importlib import reload
reload(at)
speed10 = DATA('speed10', passes=1000, autoplot=False)
speed10 = at.DATA('speed10', passes=1000, autoplot=False)
at.plot_field(speed10, ratioplot=True)
reload(at)
at.plot_field(speed10, ratioplot=True)
reload(at)
at.plot_field(speed10, ratioplot=True)
reload(at)
at.plot_field(speed10, ratioplot=True)
reload(at)
at.plot_field(speed10, ratioplot=True)
reload(at)
at.plot_field(speed10, ratioplot=True)
reload(at)
at.plot_field(speed10, ratioplot=True)
reload(at)
at.plot_field(speed10, ratioplot=True)
reload(at)
at.plot_field(speed10, ratioplot=True)
reload(at)
at.plot_field(speed10, ratioplot=True)
reload(at)
at.plot_field(speed10, ratioplot=True)
reload(at)
at.plot_field(speed10, ratioplot=True)
reload(at)
at.plot_field(speed10, ratioplot=True)
reload(at)
at.plot_field(speed10, ratioplot=True)
reload(at)
at.plot_field(speed10, ratioplot=True)
T2 = DATA("T2")
T2 = at.DATA("T2")
T2.change_options(autoplot=False)
speed10 = at.DATA(speed10, autoplot=False)
speed10 = at.DATA('speed10', autoplot=False)
at.plot_field(speed10, ratioplot=True)
at.plot_field(T2, ratioplot=True)
reload(at)
speed10 = at.DATA('speed10', autoplot=False)
at.plot_field(speed10, ratioplot=True)
reload(at)
speed10 = at.DATA('speed10', autoplot=False)
reload(at)
at.plot_field(speed10, ratioplot=True)
speed = at.DATA('speed', autoplot=False)
reload(at)
speed = at.DATA('speed', autoplot=False)
speed = at.DATA('speed', autoplot=False, passes=1000)
reload(at)
speed = at.DATA('speed', autoplot=False, passes=1000, pars=at.params(mu=1, alt=5))
speed.change_parameters(mu=0.5)
speed.change_options(autoplot=True)
speed.update()
at.plot_spectra_turb(speed)
speed.print_info()
speed.calc_spectra()
speed.print_info()
print(speed.S)
speed.spectrum_turb_added()
import numpy as p
import numpy as np
del p
import numpy as np
print(np.min(np.abs(speed.Xsmooth)))
ua = at.DATA('ua', initialise='Basic', autoplot=False)
ua.set_smoothness(1000)
print(np.max(np.abs(ua.Xsmooth)))
print(np.min(np.abs(ua.Xsmooth)))
speed.print_info()
speed.change_options(autoplot=False)
for h in [100,200,300,500,1000]:
	speed.set_height(h)
	at.plot_field(ratioplot=True)
for h in [100,200,300,500,1000]:
	speed.set_height(h)
	at.plot_field(speed, ratioplot=True)
speed=at.DATA('speed', initialise=False)
speed.set_smoothness(1000)
speed.change_options(autoplot=False)
for h in [100,200,300,500,1000]:
	speed.set_height(h)
	at.plot_field(speed, ratioplot=True)
print(np.max(speed.turb_ratio))
print(np.min(speed.turb_ratio))
speed=at.DATA('speed', initialise=False, pars=at.params(alt=5))
speed.set_smoothness(1000)
speed.set_height(100)
speed.add_turbulence()
reload(at)
speed=at.DATA('speed', initialise="Partial", pars=at.params(alt=5), passes=1000, heiheight=100)
speed=at.DATA('speed', initialise="Partial", pars=at.params(alt=5), passes=1000, h=100)
speed=at.DATA('speed', initialise="Full", pars=at.params(alt=5), passes=1000, h=100)
reload(at)
speed=at.DATA('speed', initialise="Full", pars=at.params(alt=5), passes=1000, h=100)
reload(at)
speed=at.DATA('speed', initialise="Full", pars=at.params(alt=5), passes=1000, h=100)
reload(at)
speed=at.DATA('speed', initialise="Full", pars=at.params(alt=5), passes=1000, h=100)
print(speed.xvals)
print(speed.xvals.shape)
print(speed.xvals[0] - speed.xvals[1])
print(np.max(speed.xvals[0] - speed.xvals[1]))
print(np.max(speed.yvals[0] - speed.yvals[1]))
print(xvals[0,190,190], yvals[0,190,190] )
print(speed.xvals[0,190,190], speed.yvals[0,190,190] )
print(speed.xvals[0,190,400], speed.yvals[0,190,400] )
print(speed.xvals[0,190,500], speed.yvals[0,190,500] )
speed=at.DATA('speed', initialise="Full", pars=at.params(alt=5), passes=1000, h=100)
U10=at.DATA('U10', initialise="Full", pars=at.params(alt=5), passes=1000, h=100)
reload(at)
U10=at.DATA('U10', initialise="Full", pars=at.params(alt=5), passes=1000, h=100)
reload(at)
U10=at.DATA('U10', initialise="Full", pars=at.params(alt=5), passes=1000, h=100)
reload(at)
U10=at.DATA('U10', initialise="Full", pars=at.params(alt=5), passes=1000, h=100)
speed=at.DATA('speed', initialise="Full", pars=at.params(alt=5), passes=1000, h=100)
import addturb as at
from importlib import reload
speed = at.DATA('speed', initialise='False')
print(np.min(speed.turb_ratio))
import numpy as np
print(np.min(speed.turb_ratio))
speed.set_smoothness(1000)
print(np.min(speed.turb_ratio))
speed.set_height(100)
print(np.min(speed.turb_ratio))
print(np.max(speed.turb_ratio))
print(speed.turb_ratio)
print(speed.X)
print(np.sum(np.isnan(speed.turb_ratio)))
print(np.sum(np.isnan(speed.X)))
print(np.sum(np.isnan(speed.dX)))
speed.set_height(100)
print(np.sum(np.isnan(speed.X)))
print(np.sum(np.isnan(speed.X.ua.X)))
print(np.sum(np.isnan(speed.X.U.X)))
print(np.sum(np.isnan(speed.U.X)))
reload(at)
speed = at.DATA('speed', initialise='False')
reload(at)
speed = at.DATA('speed', initialise='False')
import addturb as at
class recursive:
	__init__(self):
class recursive:
	def __init__(self):
		self.X = self
		self.a = 12
r = recursive
print(r.X)
class recursive:
	def __init__(self):
		self.X = self
		self.a = 12
	def __str(self):
		return self.a
r = recursive()
print(r)
print(r.X)
print(r.X.X)
print(r.X.X.X)
print(r.X.X.X.X)
print(r.X.X.X.X.a)
reload(at)
from importlib import reload
reload(at)
import addturb as at
speed = at.DATA('speed', initialise='Partial')
speed = at.DATA('speed', initialise='Partial', autoplot=False)
reload(at)
speed = at.DATA('speed', initialise='Partial', autoplot=False)
reload(at)
speed = at.DATA('speed', initialise='Partial', autoplot=False)
speed = at.DATA('speed', initialise='Partial', autoplot=False)
reload(at)
speed = at.DATA('speed', initialise='Partial', autoplot=False)
reload(at)
speed = at.DATA('speed', initialise='Partial', autoplot=False)
reload(at)
speed = at.DATA('speed', initialise='Partial', autoplot=False)
U10 = at.DATA('U10', initialise='Partial', autoplot=False)
reload(at)
U10 = at.DATA('U10', initialise='Partial', autoplot=False)
reload(at)
U10 = at.DATA('U10', initialise='Partial', autoplot=False)
reload(at)
U10 = at.DATA('U10', initialise='Partial', autoplot=False)
reload(at)
U10 = at.DATA('U10', initialise='Partial', autoplot=False)
reload(at)
U10 = at.DATA('U10', initialise='Partial', autoplot=False)
reload(at)
U10 = at.DATA('U10', initialise='Partial', autoplot=False)
reload(at)
U10 = at.DATA('U10', initialise='Partial', autoplot=False)
speed = at.DATA('speed', initialise='Partial', autoplot=False)
print(speed.turb_ratio)
np.sum(speed.X[0])
import numpy as np
np.sum(speed.X[0])
np.sum(speed.X[1])
np.sum(speed.X[2])
np.sum(speed.Xhy)
np.sum(speed.Xinterp[0])
np.sum(speed.Xinterp[1])
np.sum(speed.Xinterp[2])
print(np.max(speed.turb_ratio))
print(np.min(speed.turb_ratio))
print(np.min(speed.turb_ratio[-1,]))
print(np.max(speed.turb_ratio[-1,]))
speed10 = at.DATA('speed10', passes=1000)
print(np.max(speed10.turb_ratio))
print(np.min(speed10.turb_ratio))
speed.set_height(100)
print(np.max(speed.turb_ratio))
print(np.min(speed.turb_ratio))
print(np.max(speed.turb_ratio[-1,]))
print(np.min(speed.turb_ratio[-1,]))
print(np.min(speed.turb_ratiointerp[-1,]))
print(np.max(speed.turb_ratiointerp[-1,]))
print(np.max(speed.turb_ratio[-1,]))
print(np.min(speed.turb_ratio[-1,]))
speed = at.DATA('speed', initialise='Partial', passes=1000)
import addturb as at
from importlib import reload
speed = at.DATA('speed', initialise='Partial', passes=1000)
reload(at)
speed = at.DATA('speed', initialise='SmoothOnly', passes=1000)
print(speed.X.shape)
print(speed.Xsmooth.shape)
Xsmooth = np.power(speed.U.Xsmooth,2) + np.power(speed.V.Xsmooth,2)
import numpy as np
Xsmooth = np.power(speed.U.Xsmooth,2) + np.power(speed.V.Xsmooth,2)
Xsmooth=np.sqrt(Xsmooth)
print(Xsmooth)
print(speed.Xsmooth-Xsmooth)
print(np.max(speed.Xsmooth-Xsmooth))
Xsmooth2 = switch['speed'](speed.U.Xsmooth,speed.V.Xsmooth)
Xsmooth2 = at.switch['speed'](speed.U.Xsmooth,speed.V.Xsmooth)
print(np.max(speed.Xsmooth-Xsmooth2))
print(np.max(Xsmooth-Xsmooth2))
print(np.max(np.abs(Xsmooth-Xsmooth2)))
print(np.max(np.abs( np.power(speed.U.Xsmooth,2) - speed.U.Xsmooth*speed.U.Xsmooth)))
ratio = speed.X/speed.Xsmooth
print(np.max(ratio))
print(np.min(ratio))
reload(at)
T = at.DATA('T', initialise='SmoothOnly')
T = at.DATA('T', initialise='SmoothOnly', passes=1000)
Tratio = T.X/T.Xsmooth
np.max(Tratio)
np.max(Tratio[-1,])
print(T.X)
TH = at.DATA('th', initialise='SmoothOnly', passes=1000)
print(TH)
print(TH.X - T.X)
np.max(TH.X/TH.Xsmooth)
Tratio = T.X/T.Xsmooth
np.max(Tratio[-1])
print(np.min(np.abs(T.X[-1])))
print(np.max(np.abs(T.X[-1])))
QV = at.DATA('QVAPOR', passes=1000, initialise='SmoothOnly')
print(QVAPOR.X/QVAPOR.Xsmooth)
print(QV.X/QV.Xsmooth)
print(QV.X)
print(QV.Xsmooth)
print(np.max(QV.X))
print(np.max(QV.X/QV.Xsmooth))
print(np.min(QV.X/QV.Xsmooth))
Tnew = T.X[0,]*T.X[-1,]/T.Xsmooth[-1,]
print(np.max(Tnew))
print(np.max(T.X))
print(np.mean(T.X))
print(np.mean(Tnew))
Thnew = TH.X[0,]*TH.X[-1,]/TH.Xsmooth[-1,] 
print(Thnew)
print(Thnew-300)
print(np.max(Thnew))
print(np.max(T.X[-1]))
print(np.max(Tnew))
print(np.max(Thnew-300))
print(speed.U.Xhy)
speed.add_turbulence()
import addturb as at
from importlib import reload
reload(at)
speed = at.DATA('speed', passes=1000, h=100, initialise='Partial')
import addturb as at
from importlib import reload
speed = at.DATA('speed')
print(speed)
speed = at.DATA('speed', initialise='SmoothOnly')
speed.set_height(h)
speed.set_height(100)
speed.Xinterp
speed.Xsmoothinterp
speed.Xinterp - speed.Xsmoothinterp
speed.Xinterp.shape - speed.Xsmoothinterp.shape
print(speed.Xinterp.shape, speed.Xsmoothinterp.shape)
import wrf
Xinterp = wrf.to_np(speed.Xinterp)
Xsmoothinterp = wrf.to_np(speed.Xsmoothinterp)
Xinterp-Xsmoothinterp
reload(at)
speed = at.DATA('speed', initialise='SmoothOnly')
speed.set_height(100)
reload(at)
speed = at.DATA('speed', initialise='SmoothOnly')
reload(at)
speed = at.DATA('speed', initialise='SmoothOnly')
speed.set_height(100)
speed.add_turbulence()
speed.set_parameters(alt=6)
speed.add_turbulence()
speed.U.Xhy
speed.U.Xhyfull
speed.U.Xhy_full
print(speed.__dict__)
print(speed.U.__dict__)
print(speed.U.Xhy_full)
print(speed.U)
speed = at.DATA('speed', initialise='Partial', pars=at.params(alt=6))
reload(at)
speed = at.DATA('speed', initialise='Partial', pars=at.params(alt=6))
print(speed.U.Xhy_full)
reload(at)
speed = at.DATA('speed', initialise='Partial', pars=at.params(alt=6))
print(speed.U.Xhy_full)
print(np.max(speed.U.Xhy_full))
import numpy as np
print(np.max(speed.U.Xhy_full))
reload(at)
speed = at.DATA('speed', initialise='Partial', pars=at.params(alt=6))
reload(at)
speed = at.DATA('speed', initialise='Partial', pars=at.params(alt=6))
reload(at)
speed = at.DATA('speed', initialise='Partial', pars=at.params(alt=6))
reload(at)
speed = at.DATA('speed', initialise='Partial', pars=at.params(alt=6))
speed = at.DATA('speed', initialise='Basic', pars=at.params(alt=6))
speed = at.DATA('speed', initialise='SmoothOnly', pars=at.params(alt=6))
ua = at.DATA('ua', initialise='SmoothOnly', pars=at.params(alt=6))
va = at.DATA('va', initialise='SmoothOnly', pars=at.params(alt=6))
ratio = at.switch['speed'](ua.X,va.X)/at.switch['speed'](ua.Xsmooth,va.Xsmooth)
print(np.max(ratio))
print(np.min(ratio))
Unew = ua.X[0,]*ratio[-1,]
Vnew = va.X[0,]*ratio[-1,]
print(np.min(Unew))
print(np.max(Unew))
print(np.min(Vnew))
print(np.max(Vnew))
U = at.DATA('ua', initialise=False)
import addturb as at
U = at.DATA('ua', initialise=False)
x = U.xvals
print(np.min(xvals))
import numpy as np
print(np.min(xvals))
print(np.min(x))
print(np.max(x))
y = U.yvals
print(np.min(y))
print(np.max(y))
print(np.max(y)-np.min(y))
print(np.max(x)-np.min(x))
0.700727 + 0.833518 + 0.607224 + 0.616815 
ans
 0.700727 + 0.833518 + 0.607224 + 0.616815 + 0.525514 + 0.803838 + 0.541973 + 0.919828 + 0.699732
0.700727 + 0.833518 + 0.607224 + 0.616815 + 0.525514 + 0.803838 + 0.541973 + 0.919828 + 0.699732
0.637210+0.796458+0.649881+0.558116+0.615500+0.713854+0.569794+0.797747+0.661677
0.831998+0.880090+0.566238+0.690315+0.435134+0.907867+0.522282+1.038348+0.737757
q
quit()
import addturb as at
from importlib import reload
ua = at.DATA('ua', passes=1000, initialise="SmoothOnly")
at.plot_field_smooth(ua)
ua.set_height(100)
at.plot_field_smooth(ua)
reload(at)
at.plot_field_smooth(ua)
reload(at)
at.plot_field_smooth(ua)
reload(at)
at.plot_field_smooth(ua)
reload(at)
at.plot_field_smooth(ua)
reload(at)
at.plot_field_smooth(ua)
ua.set_height(1000)
reload(at)
at.plot_field_smooth(ua)
reload(at)
at.plot_field_smooth(ua)
ua.set_height(500)
at.plot_field_smooth(ua)
U10 = at.DATA('U10', initialise="Basic")
at.plot_field_smooth(U10)
U10.set_height(1000)
at.plot_field_smooth(U10)
reload(at)
U10 = at.DATA('U10', initialise="Partial")
at.plot_field_smooth(U10)
reload(at)
at.plot_field_smooth(U10)
reload(at)
at.plot_field_smooth(U10)
reload(at)
at.plot_field_smooth(U10)
reload(at)
at.plot_field_smooth(U10)
reload(at)
at.plot_field_smooth(U10)
reload(at)
at.plot_field_smooth(U10)
reload(at)
at.plot_field_smooth(U10)
reload(at)
at.plot_field_smooth(U10)
reload(at)
at.plot_field_smooth(U10)
reload(at)
at.plot_field_smooth(U10)
speed=at.DATA('speed', initialise=Full, pars=at.params(mu=0.75, at=4), h=100)
speed=at.DATA('speed', initialise='Full', pars=at.params(mu=0.75, at=4), h=100)
speed=at.DATA('speed', initialise='Full', pars=at.params(mu=0.75, alt=4), h=100)
speed=at.DATA('speed', initialise='Full', pars=at.params(mu=0.75, alt=4), h=100, autoplot=False)
reload(at)
speed=at.DATA('speed', initialise='Full', pars=at.params(mu=0.75, alt=4), h=100, autoplot=False)
reload(at)
speed=at.DATA('speed', initialise='Full', pars=at.params(mu=0.75, alt=4), h=100, autoplot=False)
at.plot_spectra(speed)
at.plot_spectra_turb(speed)
reload(at)
speed=at.DATA('speed', initialise='Full', pars=at.params(mu=0.75, alt=4), h=100, autoplot=False)
reload(at)
speed=at.DATA('speed', initialise='Partial', pars=at.params(mu=0.75, alt=4), h=100, autoplot=False)
print(speed.Xhy)
reload(at)
print(speed.Xhy)
speed=at.DATA('speed', initialise='Partial', pars=at.params(mu=0.75, alt=4), h=100, autoplot=False)
reload(at)
speed=at.DATA('speed', initialise='Partial', pars=at.params(mu=0.75, alt=4), h=100, autoplot=False)
reload(at)
speed=at.DATA('speed', initialise='Partial', pars=at.params(mu=0.75, alt=4), h=100, autoplot=False)
reload(at)
speed=at.DATA('speed', initialise='Partial', pars=at.params(mu=0.75, alt=4), h=100, autoplot=False)
reload(at)
speed=at.DATA('speed', initialise='Partial', pars=at.params(mu=0.75, alt=4), h=100, autoplot=False)
reload(at)
speed=at.DATA('speed', initialise='Partial', pars=at.params(mu=0.75, alt=4), h=100, autoplot=False)
reload(at)
speed=at.DATA('speed', initialise='Partial', pars=at.params(mu=0.75, alt=4), h=100, autoplot=False)
reload(at)
speed=at.DATA('speed', initialise='Partial', pars=at.params(mu=0.75, alt=4), h=100, autoplot=False)
reload(at)
speed=at.DATA('speed', initialise='Partial', pars=at.params(mu=0.75, alt=4), h=100, autoplot=False)
at.plot_spectra_turb(speed)
speed.calc_spectra()
speed.spectrum_turb_added()
at.plot_spectra_turb(speed)
for mu in [0.5, 1, 1.25]:
	speed.change_parameters(mu=mu)
at.plot_spectra_turb(speed)
speed.change_options(autoplot=True)
for mu in [0.5, 1, 1.25]:
	speed.change_parameters(mu=mu)
for mu in [1.5]:
	speed.change_parameters(mu=mu)
for mu in [0.5, 1, 1.5, 0.75]:
	speed.change_parameters(mu=mu)
reload(at)
for mu in [0.5, 1, 1.5, 0.75]:
	speed.change_parameters(mu=mu)
for mu in [1.25]:
	speed.change_parameters(mu=mu)
import addturb as at
T2 = at.DATA("T2", initialise="Basic")
quit
quit()
import addturb as at
speed10 = at.DATA('speed10') 
ls
cd 
